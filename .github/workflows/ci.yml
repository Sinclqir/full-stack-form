name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          cd server
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Run backend tests
        run: |
          cd server
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          MYSQL_HOST: localhost
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
          JWT_SECRET_KEY: test-secret-key

      - name: Upload coverage to Codecov (if token available)
        uses: codecov/codecov-action@v4
        with:
          files: |
            ./coverage/lcov.info
            ./server/coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            ./coverage/
            ./server/htmlcov/
          retention-days: 30

  integration:
    needs: test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          cd server && pip install -r requirements.txt

      - name: Start Docker services
        run: docker-compose up -d --build

      - name: Wait for services to be ready
        run: |
          npx wait-on http://localhost:8000
          npx wait-on http://localhost:3000

      - name: Run Cypress E2E tests
        run: npx cypress run
        env:
          CYPRESS_baseUrl: http://localhost:3000

  deploy:
    needs: [test, integration]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
