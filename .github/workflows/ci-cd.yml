name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
        env:
          CODECOV_DEBUG: true

      - name: Upload dist & coverage for next jobs
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./coverage/
            ./dist/
          retention-days: 7

  docker_and_e2e:
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - uses: actions/checkout@v4

      - name: Clean up previous containers and volumes
        run: |
          echo "=== CLEANING UP PREVIOUS CONTAINERS ==="
          docker compose down -v || echo "No previous containers to clean"
          docker system prune -f || echo "No unused resources to clean"

      - name: Create .env file for Docker tests
        run: |
          cat > .env << EOF
          MYSQL_HOST=mysql
          MYSQL_DATABASE=fullstackform_db
          MYSQL_USER=root
          MYSQL_PASSWORD=Fullstackform1985
          MYSQL_ROOT_PASSWORD=Fullstackform1985
          PORT=8000
          ADMIN_EMAIL=loise.fenoll@ynov.com
          ADMIN_PASSWORD=PvdrTAzTeR247sDnAZBr
          JWT_SECRET_KEY=955aeaac8e7935ebc675c00de118253b84a6143aade62476d40424f25c17d20390e973aeb36aa69472f4e60b497b2e59
          VITE_API_URL=http://server:8000
          EOF

      - name: Build and start Docker containers
        run: |
          # Start MySQL first and wait for it to be ready
          docker compose up -d mysql
          echo "MySQL container started, checking logs..."
          
          # Show MySQL logs during startup
          timeout 180 bash -c '
            while ! docker exec mysql_db mysql -u root -pFullstackform1985 -e "SELECT 1;" > /dev/null 2>&1; do
              echo "MySQL not ready yet... ($(date))"
              echo "Recent MySQL logs:"
              docker compose logs --tail=10 mysql
              sleep 10
            done
          '
          echo "MySQL is ready!"
          
          # Start the backend after MySQL is ready
          docker compose up -d server
          
          # Start the frontend with the correct API URL for host access
          VITE_API_URL=http://localhost:8000 docker compose up -d client

      - name: Debug MySQL startup issues
        run: |
          echo "=== DEBUGGING MYSQL STARTUP ==="
          echo "Container status:"
          docker compose ps
          
          echo "MySQL container logs:"
          docker compose logs mysql
          
          echo "Testing MySQL connection with different methods:"
          echo "Method 1 - Direct exec:"
          docker exec mysql_db mysql -u root -pFullstackform1985 -e "SELECT 1;" || echo "Method 1 failed"
          
          echo "Method 2 - Check if MySQL process is running:"
          docker exec mysql_db ps aux | grep mysql || echo "No MySQL process found"
          
          echo "Method 3 - Check MySQL port:"
          docker exec mysql_db netstat -tlnp | grep 3306 || echo "Port 3306 not listening"
          
          echo "Method 4 - Check MySQL error log:"
          docker exec mysql_db cat /var/log/mysql/error.log 2>/dev/null || echo "No error log found"

      - name: Test MySQL with simpler configuration
        run: |
          echo "=== TESTING MYSQL WITH SIMPLER CONFIG ==="
          echo "Stopping current MySQL container:"
          docker compose stop mysql
          
          echo "Starting MySQL with simpler password:"
          docker run -d --name mysql_test \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=test_db \
            -p 3307:3306 \
            mysql:8.0 --default-authentication-plugin=mysql_native_password
          
          echo "Waiting for test MySQL to be ready..."
          timeout 60 bash -c 'until docker exec mysql_test mysql -u root -proot -e "SELECT 1;" > /dev/null 2>&1; do sleep 5; echo "Test MySQL not ready yet..."; done'
          
          if [ $? -eq 0 ]; then
            echo "Test MySQL started successfully!"
            docker stop mysql_test
            docker rm mysql_test
          else
            echo "Test MySQL also failed to start"
            docker logs mysql_test
          fi

      - name: Wait for services to be ready
        run: |
          echo "Waiting for all services to be ready..."
          sleep 30
          echo "Checking container status:"
          docker compose ps
          echo "Container logs:"
          docker compose logs --tail=50
          
          echo "Waiting for health checks to pass..."
          timeout 300 bash -c 'until docker compose ps | grep -q "healthy"; do 
            echo "Waiting for healthy containers... ($(date))"
            docker compose ps
            sleep 15
          done'
          echo "All services are healthy!"

      - name: Wait for backend
        run: |
          echo "Waiting for backend..."
          timeout 120 bash -c 'until curl -f http://localhost:8000 > /dev/null 2>&1; do sleep 5; echo "Backend not ready yet..."; done'
          echo "Backend is ready!"

      - name: Check database and admin user
        run: |
          echo "=== CHECKING DATABASE STATE ==="
          echo "Testing database connection:"
          docker exec mysql_db mysql -u root -pFullstackform1985 -e "USE fullstackform_db; SHOW TABLES;" || echo "Database connection failed"
          
          echo "Checking if admin user exists:"
          docker exec mysql_db mysql -u root -pFullstackform1985 -e "USE fullstackform_db; SELECT id, email, role FROM users WHERE email='loise.fenoll@ynov.com';" || echo "Admin user check failed"
          
          echo "Listing all users:"
          docker exec mysql_db mysql -u root -pFullstackform1985 -e "USE fullstackform_db; SELECT id, email, role, created_at FROM users;" || echo "Users listing failed"

      - name: Verify database connectivity before restart
        run: |
          echo "=== VERIFYING DATABASE CONNECTIVITY ==="
          echo "Testing MySQL connection from host:"
          docker exec mysql_db mysql -u root -pFullstackform1985 -e "SELECT 1;" || echo "MySQL connection failed"
          
          echo "Testing MySQL connection from backend container:"
          docker exec fastapi_backend python -c "import mysql.connector; print('MySQL connector available')" || echo "MySQL connector not available in backend"

      - name: Ensure MySQL is fully ready
        run: |
          echo "=== ENSURING MYSQL IS FULLY READY ==="
          echo "Waiting for MySQL to be completely ready..."
          timeout 60 bash -c '
            while ! docker exec mysql_db mysql -u root -pFullstackform1985 -e "SELECT 1;" > /dev/null 2>&1; do
              echo "MySQL not ready yet... ($(date))"
              sleep 5
            done
          '
          echo "MySQL is fully ready!"
          
          echo "Testing database schema:"
          docker exec mysql_db mysql -u root -pFullstackform1985 -e "USE fullstackform_db; SHOW TABLES;" || echo "Database schema not ready"

      - name: Restart backend to ensure proper initialization
        run: |
          echo "=== RESTARTING BACKEND ==="
          echo "Stopping backend container..."
          docker compose stop server
          
          echo "Starting backend container..."
          docker compose up -d server
          
          echo "Waiting for backend to be ready after restart..."
          echo "Checking logs during startup..."
          timeout 120 bash -c '
            while ! curl -f http://localhost:8000/health > /dev/null 2>&1; do
              echo "Backend not ready yet... ($(date))"
              echo "Recent logs:"
              docker compose logs --tail=10 server
              sleep 10
            done
          '
          echo "Backend is ready after restart!"

      - name: Debug backend restart issues
        run: |
          echo "=== DEBUGGING BACKEND RESTART ==="
          echo "Container status after restart:"
          docker compose ps
          
          echo "Backend container logs after restart:"
          docker compose logs --tail=50 server
          
          echo "Testing if backend is responding:"
          curl -v http://localhost:8000/health || echo "Health endpoint not responding"
          curl -v http://localhost:8000/ || echo "Root endpoint not responding"
          
          echo "Checking if port 8000 is listening:"
          netstat -tlnp | grep :8000 || echo "Port 8000 not listening"
          
          echo "Checking backend container processes:"
          docker exec fastapi_backend ps aux || echo "Cannot check processes"

      - name: Wait for frontend
        run: |
          echo "Waiting for frontend..."
          echo "Testing frontend connectivity..."
          curl -v http://localhost:3000 || echo "Frontend not responding yet"
          
          timeout 180 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do 
            echo "Frontend not ready yet... ($(date))"
            docker compose logs --tail=10 client
            sleep 10
          done'
          echo "Frontend is ready!"

      - name: Show final container status
        run: |
          docker compose ps
          echo "Frontend container logs:"
          docker compose logs client
          echo "Backend container logs:"
          docker compose logs server

      - name: Show backend logs for debugging
        run: |
          echo "=== BACKEND LOGS ==="
          docker compose logs server
          echo "=== MYSQL LOGS ==="
          docker compose logs mysql
          echo "=== CONTAINER STATUS ==="
          docker compose ps

      - name: Test API connectivity
        run: |
          echo "Testing API connectivity from host:"
          curl -v http://localhost:8000 || echo "Backend not accessible from host"
          
          echo "Testing API connectivity from frontend container:"
          docker exec react_frontend curl -v http://server:8000 || echo "Backend not accessible from frontend container"
          
          echo "Testing frontend connectivity:"
          curl -v http://localhost:3000 || echo "Frontend not accessible"
          
          echo "Testing specific API endpoints:"
          echo "Testing /login endpoint:"
          curl -X POST http://localhost:8000/login -H "Content-Type: application/json" -d '{"email":"test@test.com","password":"test"}' || echo "Login endpoint not working"
          
          echo "Testing /users endpoint (should fail without auth):"
          curl -v http://localhost:8000/users || echo "Users endpoint not accessible"
          
          echo "Container network inspection:"
          docker network ls
          docker network inspect full-stack-form_app-network || echo "Network not found"

      - name: Test API endpoints directly
        run: |
          echo "=== TESTING LOGIN ENDPOINT ==="
          curl -X POST http://localhost:8000/login \
            -H "Content-Type: application/json" \
            -d '{"email":"loise.fenoll@ynov.com","password":"PvdrTAzTeR247sDnAZBr"}' \
            -v || echo "Login test failed"
          
          echo "=== TESTING REGISTER ENDPOINT ==="
          curl -X POST http://localhost:8000/register \
            -H "Content-Type: application/json" \
            -d '{"last_name":"Test","first_name":"User","email":"test@example.com","password":"Password123!","birth_date":"1990-01-01","city":"Paris","postal_code":"75001","role":"user"}' \
            -v || echo "Register test failed"
          
          echo "=== TESTING HEALTH ENDPOINT ==="
          curl -v http://localhost:8000/health || echo "Health endpoint failed"

      - name: Install dependencies (again for Cypress)
        run: npm ci

      - name: Run Cypress E2E tests (Basic Infrastructure)
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
        run: |
          npx cypress install
          npx cypress run --spec "cypress/e2e/basic.cy.js"

      - name: Run Cypress E2E tests (Authentication)
        continue-on-error: true
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
        run: |
          npx cypress run --spec "cypress/e2e/auth.cy.js"

      - name: Run Cypress E2E tests (User Management)
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
        run: |
          npx cypress run --spec "cypress/e2e/users.cy.js"

      - name: Clean up Docker containers
        run: docker compose down

  deploy_vercel:
    runs-on: ubuntu-latest
    needs: [build_test, docker_and_e2e]

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
