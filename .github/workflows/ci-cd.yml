name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
        env:
          CODECOV_DEBUG: true

      - name: Upload dist & coverage for next jobs
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./coverage/
            ./dist/
          retention-days: 7

  docker_and_e2e:
    runs-on: ubuntu-latest
    needs: build_test

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file for Docker tests
        run: |
          cat > .env << EOF
          MYSQL_HOST=mysql
          MYSQL_DATABASE=fullstackform_db
          MYSQL_USER=root
          MYSQL_PASSWORD=Fullstackform1985
          MYSQL_ROOT_PASSWORD=Fullstackform1985
          PORT=8000
          ADMIN_EMAIL=loise.fenoll@ynov.com
          ADMIN_PASSWORD=PvdrTAzTeR247sDnAZBr
          JWT_SECRET_KEY=955aeaac8e7935ebc675c00de118253b84a6143aade62476d40424f25c17d20390e973aeb36aa69472f4e60b497b2e59
          VITE_API_URL=http://server:8000
          EOF

      - name: Build and start Docker containers
        run: |
          # Start all containers except the frontend
          docker compose up -d mysql server
          
          # Start the frontend with the correct API URL for host access
          VITE_API_URL=http://localhost:8000 docker compose up -d client

      - name: Wait for services to be ready
        run: |
          echo "Waiting for all services to be ready..."
          sleep 30
          echo "Checking container status:"
          docker compose ps
          echo "Container logs:"
          docker compose logs --tail=50
          
          echo "Waiting for health checks to pass..."
          timeout 300 bash -c 'until docker compose ps | grep -q "healthy"; do 
            echo "Waiting for healthy containers... ($(date))"
            docker compose ps
            sleep 15
          done'
          echo "All services are healthy!"

      - name: Wait for backend
        run: |
          echo "Waiting for backend..."
          timeout 120 bash -c 'until curl -f http://localhost:8000 > /dev/null 2>&1; do sleep 5; echo "Backend not ready yet..."; done'
          echo "Backend is ready!"

      - name: Wait for frontend
        run: |
          echo "Waiting for frontend..."
          echo "Testing frontend connectivity..."
          curl -v http://localhost:3000 || echo "Frontend not responding yet"
          
          timeout 180 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do 
            echo "Frontend not ready yet... ($(date))"
            docker compose logs --tail=10 client
            sleep 10
          done'
          echo "Frontend is ready!"

      - name: Show final container status
        run: |
          docker compose ps
          echo "Frontend container logs:"
          docker compose logs client
          echo "Backend container logs:"
          docker compose logs server

      - name: Test API connectivity
        run: |
          echo "Testing API connectivity from host:"
          curl -v http://localhost:8000 || echo "Backend not accessible from host"
          
          echo "Testing API connectivity from frontend container:"
          docker exec react_frontend curl -v http://server:8000 || echo "Backend not accessible from frontend container"
          
          echo "Testing frontend connectivity:"
          curl -v http://localhost:3000 || echo "Frontend not accessible"
          
          echo "Testing specific API endpoints:"
          echo "Testing /login endpoint:"
          curl -X POST http://localhost:8000/login -H "Content-Type: application/json" -d '{"email":"test@test.com","password":"test"}' || echo "Login endpoint not working"
          
          echo "Testing /users endpoint (should fail without auth):"
          curl -v http://localhost:8000/users || echo "Users endpoint not accessible"
          
          echo "Container network inspection:"
          docker network ls
          docker network inspect full-stack-form_app-network || echo "Network not found"

      - name: Install dependencies (again for Cypress)
        run: npm ci

      - name: Run Cypress E2E tests (Basic Infrastructure)
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
        run: |
          npx cypress install
          npx cypress run --spec "cypress/e2e/basic.cy.js"

      - name: Run Cypress E2E tests (Authentication)
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
        run: |
          npx cypress run --spec "cypress/e2e/auth.cy.js"

      - name: Run Cypress E2E tests (User Management)
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
        run: |
          npx cypress run --spec "cypress/e2e/users.cy.js"

      - name: Clean up Docker containers
        run: docker compose down

  deploy_vercel:
    runs-on: ubuntu-latest
    needs: [build_test, docker_and_e2e]

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
